#!/usr/bin/env bash
#———————————————————————————————————————— config

x

#———————————————————————————————————————— instructions
#
#    docs.svija.com/fr/quick-start/1-1-svija-sync
#
#———————————————————————————————————————— language independent
# http://ascii-table.com/ansi-escape-sequences.php

     version='1.1.4'
        lang='fr'
        bold=`echo $'\e[1m'`
        none=`echo $'\e[0m'`

#———————————————————————————————————————— localized keys                            
                                                                                    
  keyup='U'                                                                         
keydown='D'                                                                         
 keyyes='Y'                                                                         
  keyno='N'                                                                         
                                                                                    
#———————————————————————————————————————— localized strings                         

str01="Échec de connexion"
str02="Êtes-vous conneté·e à Internet ?"
str03="   Site web :"
str04="Utilisateur :"
str05="        Nom :"
str06="Votre ordinateur -> site web :"
str07="Votre ordinateur <- site web :"
str08="Choisissez une option ($bold""Q$none pour quitter)"
str09="Quel est votre prénom ?"
str10="Dernière modification par"
str11="2-30 lettres, trait, point & espace$none — $bold""pas d'accent"
str12="Choix non valide"
str13="appuyer sur Q"
str14="pour fermer"
str15="Rien à télécharger"
str16="Synchronisation annulée"
str17="Remplacer \"sync\" sur votre ordinateur"
str18="êtes-vous sûr·e ?"
str19="Écraser les fichiers de votre ordinateur ?"
str20="Écraser les fichiers du site web ?"
str21="Synchronisation avec $site"
str22="Appuyer sur espace"
str23="mercd d'attendre"
str24="Téléchargement depuis"
str25="Échec de synchronisation"
str26="Synchronisation terminée"
str28="pour arrêter"
str29="Téléchargement arrêté"
str30="Téléchargement arrêté"
str31="Téléchargement annulé"
str32="Ne fermez pas la fenêtre"
str33="ploader"
str34="ownloader"
str35="Taper votre mot de passe sur cet ordinateur"
colon=" :"
question=" ?"

#———————————————————————————————————————— housekeeping strings

          bar="———————————————————————————————————————————————————————————————————————————"
 clear_screen="\e[2J\e"
   clear_1523="\e[15;0H\e[K\n\e[K\n\e[K\n\e[K\n\e[K\n\e[K\n\e[K\n\e[K\n  $bar\e[23;4H"
   clear_2023="\e[20;0H\e[K\n\e[K\n\e[K\n  $bar\e[23;4H"
 clear_status="\e[23;0H\e[K  $bar\e[23;4H"
clear_command="\e[21;5H\e[K"

#———————————————————————————————————————— composed text

motd=$(curl -Ls msg.svija.com/$version/$lang.txt)

if [[ $motd == '' ]]; then
    motd="\n\n    $bold""$str01.$none\n\n    $str02\n\n"
fi

#———————————————————————————————————————— welcome & instructions

uload="$bold$keyup$none$str33"
dload="$bold$keydown$none$str34"

welcome="\e[3;0H$motd

  $bar

    Svija Sync V$version"

site_data="\e[14;5H$bold""$str03 $site
    $str04 $user
    $str05"

instructions="\e[18;5H$none$str06 $uload
    $str07 $dload"

#—————————————————————————————————————————————————— the rest

         whats_name="\e[21;0H    $bold""$str09$none ______________________________\e[30D"
         name_error="\e[23;4H $bold$str11$none "
     invalid_choice="\e[23;0H\e[K    $str12 — $bold""$str13$none $str14$colon ___\e[2D"

    request_command="$clear_command$str08 ___\e[2D"
  nothing_to_upload="$bold$str15!$none"
uploading_interrupted="$bold$str29$none"
           canceled="$bold""$str16 — $bold""$str13$none $str14$none... "

    replace_warning="\e[23;4H $bold""$str17 $clear_command$str18 ($keyyes/$keyno)$colon ___\e[2D$none"
   overwrite_status="\e[23;4H$bold $str10"
  overwrite_warning_site="\e[21;5H$bold$str19 ($keyyes/$keyno)$colon ___\e[2D$none"
  overwrite_warning_server="\e[21;5H$bold$str20 ($keyyes/$keyno)$colon ___\e[2D$none"

    upload_canceled="$bold$str31$none"
   uploading_status="\e[23;4H $bold$str21$none — $str22 $str28"
        downloading="$bold$str24 $site — $str23...$none"

        do_not_close="$bold$str32$none"
    download_failed="$bold$str25$none"
  download_canceled="$bold$str30$none"
  download_finished="$bold$str26$none"

#——————————————————————————————————————————————————
#———————————————————————————————————————— variables
#——————————————————————————————————————————————————

name=''

pwd_file='.pass'

ubuntu="$user@$site::$user/sync"

interval=5

exclusions=(
    --exclude ".DS_Store"
    --exclude ".swp"
    --exclude ".git"
    --exclude ".command"
    --exclude ".pwd"
)


#——————————————————————————————————————————————————
#———————————————————————————————————————— functions
#——————————————————————————————————————————————————

#———————————————————————————————————————— 1 upper case

to_upper(){
    echo "$1" | tr a-z A-Z
}

#———————————————————————————————————————— 2 lower case

to_lower(){
    echo "$1" | tr A-Z a-z
}

#———————————————————————————————————————— one letter in upper case

read_one_uc(){
    read -n 1 character;
    character=$(to_upper "$character")
    echo $character
}

#———————————————————————————————————————— 3 capitalize first letter

capitalize_first(){

    firstletter=`echo $1 | cut -c1-1`
    rest=`echo $1 | cut -c2-60`

    firstletter=$(to_upper $firstletter)

    chrlen=${#rest}
    if (( chrlen > 1 )); then
        rest=$(to_lower $rest)
    else
        rest=$(to_upper $rest)
    fi

echo "$firstletter$rest"
}

#———————————————————————————————————————— 4 capitalize jean-philippe

capitalize_dash(){

    tiret="^.*\-.*$"

    if [[ "$1" =~ $tiret ]]; then
        IFS='-'
        read -ra ADDR <<< "$1"
        first=$(capitalize_first "${ADDR[0]}")
        second=$(capitalize_first "${ADDR[1]}")
        final="$first\055$second"
    else
        final=$(capitalize_first $1)
    fi
    echo $final
}

#———————————————————————————————————————— 5 capitalize space-separated words

capitalize_words(){
    words=''

    arrayName=$@
    for i in ${arrayName[@]};
        do
            i=$(capitalize_dash $i)
            words="$words$i "
        done

    # strip last character
    words=${words%?}
    echo $words
}

#———————————————————————————————————————— 6 get name prompt

prompt_for_name(){
    printf "$clear_1923"

    safe_name="^[a-zA-Z\.\ \-]{2,30}$"
    while true; do

        printf "$whats_name"
        read -p "" name

        if [[ "$name" =~ $safe_name ]]; then return 1
            else printf "$clear_status$name_error"
        fi
    done
}

#———————————————————————————————————————— 7 get name

# returns $name of person using program

#   while [[ "$flag" != 'N' ]] && [[ "$flag" != 'Q' ]] && [[ $flag != $keyup ]] && [[ $flag != $keydown ]]; do

get_current_name(){
    name=''

    # name file exists so we use it
    if [[ -f ".name" ]]; then
        name=$(<".name")
    fi

    # name file doesn't exist so we ask for name
    if [[ "$name" == '' ]] || [[ "$name" == "\n" ]]; then
        prompt_for_name
        name=$(capitalize_words $name)
        echo $name > ".name" 
        printf "$clear_status"
    fi
    printf "\e[16;0H\e[K    $bold$str05 $name$none"
}

#———————————————————— name 2.svg › name.svg

correct_svg_names(){
    sync_dirs=("sync"/*)
    
    for f in "${sync_dirs[@]}"; do
        all_svgs=("$f"/*.svg)
        for g in "${all_svgs[@]}"; do
    
            [[ $g =~ ^.+\s\d\.svg ]] && echo matched
    
            regexp="^.+[[:space:]][[:digit:]]\.svg"
            if [[ $g =~ $regexp ]]; then
                    new_name="${g::${#g}-6}"".svg"
                    mv "$g" "$new_name"
            fi
    
        done
    done
}

#———————————————————————————————————————— get current directory

current_dir(){
    this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    echo $this_dir
}

#———————————————————————————————————————— local sync folder exists & is not empty

sync_exists(){

    shopt -s nullglob
    dirs=( ./sync/*/ )
    dirs_count=${#dirs[@]}

    if (( dirs_count < 3 )); then return 1
        else return 0
    fi
}

#————————————————————— get last mod name from server

# sets $name_prev to name from /sync/.last on server

get_previous_name(){
    name_prev=''

    mkdir -p "sync" 
    echo "$name" > "sync/.last"

    # name file does not exist, it's probably the first run
    if [[ ! -f ".name" ]]; then                                                    
        printf "\e[18;5H$str35...\n\n    "
    fi       

    # will trigger request for admin password on first run
    rsync -az --delete "${exclusions[@]}" --password-file="$pwd_file" "$ubuntu/.last" "sync/.last" 2>/dev/null

    name_prev=$(<"sync/.last")
}

#————————————————————— check if last was current user

# reset $flag if files should not be overwritten

overwrite_server(){

    if [[ $name != $name_prev ]]; then
        printf "$clear_1923 $overwrite_status $name_prev$none $overwrite_warning_server"

        confirmation=$(read_one_uc)
        if [[ $confirmation != $keyyes ]]; then
            return 1
        fi

    fi
    return 0
}

#———————————————————————————————————————— ask user what to do

# returns $flag indicating user's command

get_user_command(){
    flag=$(read_one_uc)
    
    while [[ "$flag" != 'N' ]] && [[ "$flag" != 'Q' ]] && [[ $flag != "$keyup" ]] && [[ $flag != "$keydown" ]]; do
        printf "$invalid_choice";
        flag=$(read_one_uc)
    done
}

#————————————————————————————————————————————————————————————————————————————————————————————————
#———————————————————————————————————————— program ———————————————————————————————————————————————
#————————————————————————————————————————————————————————————————————————————————————————————————
#
#    three hidden files:
#
#   .pass = rsyncd password
#   .name = first name of user
#   sync/.last = name of person who last worked on site

cd "$(current_dir)"
printf "$clear_screen"
printf "$welcome" # prints top half, bar, and svija version
printf "$clear_1523$site_data$clear_status"

#———————————————————————————————————————— test for write access

get_previous_name # sets $name_prev to name from /sync/.last on server

#———————————————————————————————————————— resume normal operations

printf "$clear_1523$site_data$instructions$clear_status"

get_current_name  # returns $name of person using program from file or prompt

echo $pass > $pwd_file; chmod 600 "$pwd_file"

#———————————————————————————————————————— main loop, ask for command, execute it

flag=''
while [[ $flag != 'Q' ]]; do

    printf "$request_command"
    get_user_command # returns $flag indicating user's command
    printf "$clear_status"

#———————————————————————————————————————— upload
    
    if [[ $flag == $keyup ]]; then
    
        status=" $upload_canceled "
        if ! sync_exists; then # no files to synchronize
            status=" $nothing_to_upload "
    
        elif overwrite_server; then
            echo $name > "sync/.last"
            name_prev="$name"
            counter=0
            unset user_input
            printf "$clear_1923$uploading_status "
            printf "$clear_command\e[21;0H    " # position cursor for progress bar

            while [[ "$user_input" != ' ' ]]; do
                correct_svg_names
                char='+'
                rsync -az --delete "${exclusions[@]}" --password-file=$pwd_file "sync/" $ubuntu 2>/dev/null && char='❚'
                counter=$((counter+1))
                if [ $counter == "74" ]; then
                    counter=0
                    printf "\e[21;0H\e[K    "
                fi
                printf "$char"
                IFS="" read -t $interval -n 1 user_input
            done
            status=" $uploading_interrupted "
        fi
    fi
    
#———————————————————————————————————————— download
    
    if [[ $flag == $keydown ]]; then
        confirmation="$keyyes"
        if sync_exists; then # if there are files to overwrite
            if [[ $name != $name_prev ]]; then
                printf "$clear_1923 $overwrite_status $name_prev $overwrite_warning_site"
                confirmation=$(read_one_uc)
            else
                printf "$clear_1923$replace_warning";
                confirmation=$(read_one_uc)
            fi
        fi
    
        if [[ $confirmation == "$keyyes" ]]; then
            printf "$clear_status $do_not_close "
            printf "$clear_command$downloading"
            status=" $download_failed "
            rsync -az --delete "${exclusions[@]}" --password-file=$pwd_file "$ubuntu/" "sync" 2>/dev/null && status=" $download_finished "
        else
            status=" $download_canceled "
        fi
    fi

#———————————————————————————————————————— reset name
    
    if [[ $flag == 'N' ]]; then
        name=''; echo '' > ".name" 
        get_current_name # returns $name of person using program from file or prompt
        #printf "$clear_1523$site_data"
        status=''
    fi
    
#————————————————————————————————————————

    printf "$clear_status$status"

done # while [[ $flag != 'Q' ]]; do

osascript -e 'tell application "Terminal" to close first window' & exit

#———————————————————————————————————————— fin
