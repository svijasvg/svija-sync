#!/usr/bin/env bash
#———————————————————————————————————————— config

x

#———————————————————————————————————————— instructions
#
#   https://github.com/svijasvg/svija-sync
#
#———————————————————————————————————————— language independent

     version='1.1.2'
        lang='fr'

# http://ascii-table.com/ansi-escape-sequences.php

        bold=`echo $'\e[1m'`
        none=`echo $'\e[0m'`

clear_entire="\e[2J\e"
clear_bottom="\e[14;0H\n\e[K\n\e[K\n\e[K\n\e[K\n\e[K\n\e[K\n\e[K\e"
 clear_third="\e[18;0H\n\e[K\n\e[K\n\e[K\n\e[K\n\e[K\n"

#———————————————————————————————————————— English keys

      upload='U'
    download='D'
      keyyes='O'
       keyno='N'

str01="Échec de connexion"
str02="Êtes-vous conneté·e à Internet ?"
str03="   Site web :"
str04="Utilisateur :"
str05="        Nom :"
str06="Votre ordinateur -> site web :"
str07="Votre ordinateur <- site web :"
str08="Choisissez une option (appuyer sur retour pour annuler)"
str09="Quel est votre prénom ?"
str10="Caractères autorisés :"
str11="2-30 lettres, trait, point et espace. Pas d'accent."
str12="Choix non valide"
str13="appuyer sur retour"
str14="pour fermer"
str15="Rien à télécharger"
str16="Synchronisation annulée"
str17="Remplacer \"sync\" sur votre ordinateur"
str18="êtes-vous sûr·e ?"
str19="a modifié le site"
str20="depuis votre dernier téléchargement. Continuer ?"
str21="Synchronisation de $site avec \"sync\" sur votre ordinateur."
str22="Appuyer sur x"
str23="Ne fermez pas cette fenêtre."
str24="Téléchargement de dossier \"sync\" de"
str25="Échec de synchronisation"
str26="Synchronisation terminée"
colon=" :"

uload="$bold$upload$none""ploader"
dload="$bold$download$none""ownloader"

#———————————————————————————————————————— composed text

        motd=$(curl -Ls msg.svija.com/$version/$lang.txt)

#———————————————————————————————————————— connection failure

if [[ $motd == '' ]]; then
  motd="\n\n    $bold""$str01.$none\n\n    $str02\n\n"
fi

#———————————————————————————————————————— welcome & instructions

welcome="\e[3;0H$motd

  ———————————————————————————————————————————————————————————————————————————

    Svija Sync V$version"

instructions_a="\e[15;5H$bold""$str03 $site
    $str04 $user
    $str05 "

instructions_b="\e[19;5H$none""$str06 $uload
    $str07 $dload

    $str08 ___\e[2D"

#—————————————————————————————————————————————————— the rest

         whats_name="\e[15;0H    $bold""$str09$none ____________\e[12D"
         name_error="\e[17;0H    $str10\n\n    $str11"
     invalid_choice="\e[22;0H    $str12 — $bold""$str13$none $str14$colon ___\e[2D"

  nothing_to_upload="\e[22;5H\e[K$str15 — $bold""$str13$none $str14$none..."
           canceled="$bold""$str16 — $bold""$str13$none $str14$none..."

    replace_warning="\e[19;5H$bold""$str17$none — $str18 [$keyyes/$keyno]$colon ___\e[2D"
overwrite_warning_a="\e[22;5H\e[19;5H$bold"
overwrite_warning_b="$str19$none\n    $str20 [$keyyes/$keyno]$colon ___\e[2D"

          uploading="\e[19;5H$str21\n    $bold""$str22$none $str14..."
        downloading="\e[21;5H$str23\e[19;5H$str24 $bold$site$none... "

    download_failed="\e[21;5H\e[K\e[1A\e[K\e[1A$str25 — $bold""$str13$none $str14..."
  download_finished="\e[21;5H\e[K\e[1A\e[K\e[1A$str26 — $bold""$str13$none $str14..."

#——————————————————————————————————————————————————
#———————————————————————————————————————— variables
#——————————————————————————————————————————————————

name=''

pwd_file='.pass'

ubuntu="$user@$site::$user/sync"

interval=5

exclusions=(
  --exclude ".DS_Store"
  --exclude ".swp"
  --exclude ".git"
  --exclude ".command"
  --exclude ".pwd"
)


#——————————————————————————————————————————————————
#———————————————————————————————————————— functions
#——————————————————————————————————————————————————

#———————————————————————————————————————— 1 upper case

to_upper(){
  echo "$1" | tr a-z A-Z
}

#———————————————————————————————————————— 2 lower case

to_lower(){
  echo "$1" | tr A-Z a-z
}

#———————————————————————————————————————— one letter in upper case

read_one_uc(){
  read -n 1 character;
  character=$(to_upper "$character")
  echo $character
}

#———————————————————————————————————————— 3 capitalize first letter

capitalize_first(){

  firstletter=`echo $1 | cut -c1-1`
  rest=`echo $1 | cut -c2-60`

  firstletter=$(to_upper $firstletter)

  chrlen=${#rest}
  if (( chrlen > 1 )); then
    rest=$(to_lower $rest)
  else
    rest=$(to_upper $rest)
  fi

echo "$firstletter$rest"
}

#———————————————————————————————————————— 4 capitalize jean-philippe

capitalize_dash(){

  tiret="^.*\-.*$"

  if [[ "$1" =~ $tiret ]]; then
    IFS='-'
    read -ra ADDR <<< "$1"
    first=$(capitalize_first "${ADDR[0]}")
    second=$(capitalize_first "${ADDR[1]}")
    final="$first\055$second"
  else
    final=$(capitalize_first $1)
  fi
  echo $final
}

#———————————————————————————————————————— 5 capitalize space-separated words

capitalize_words(){
  words=''

  arrayName=$@
  for i in ${arrayName[@]};
    do
      i=$(capitalize_dash $i)
      words="$words$i "
    done

  # strip last character
  words=${words%?}
  echo $words
}

#———————————————————————————————————————— 6 get name prompt

prompt_for_name(){
  printf "$clear_bottom"

  safe_name="^[a-zA-Z\.\ \-]{2,30}$"
  while true; do

    printf "$whats_name"
    read -p "" name

    if [[ "$name" =~ $safe_name ]]; then return 1
      else printf "$name_error"
    fi
  done
}

#———————————————————————————————————————— 7 get name

# returns $name of person using program

get_user_name(){

  # name file exists so we use it
  if [[ -f ".name" ]]; then
    name=$(<".name")

  # name file doesn't exist so we ask for name
  else
    prompt_for_name
    name=$(capitalize_words $name)
    echo $name > ".name" 
  fi
}

#———————————————————— name 2.svg › name.svg

correct_svg_names(){
  sync_dirs=("sync/*")
  
  for f in "${sync_dirs[@]}"; do
    sub_dirs=("$f"/*.svg)
    for g in "${sub_dirs[@]}"; do
  
      [[ $g =~ ^.+\s\d\.svg ]] && echo matched
  
      regexp="^.+[[:space:]][[:digit:]]\.svg"
      if [[ $g =~ $regexp ]]; then
          new_name="${g::${#g}-6}"".svg"
          mv "$g" "$new_name"
      fi
  
    done
  done
}

#———————————————————————————————————————— get current directory

current_dir(){
  this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
  echo $this_dir
}

#———————————————————————————————————————— local sync folder exists & is not empty

files_exist(){

  shopt -s nullglob
  dirs=( ./$1/*/ )
  dirs_count=${#dirs[@]}

  if (( dirs_count < 3 )); then return 1
    else return 0
  fi
}

#————————————————————— check if last was current user

# reset $flag if files should not be overwritten

confirm_overwrite(){

  last_written_by=''

  mkdir -p "sync" 
  echo "$name" > "sync/.last"

  rsync -az --delete "${exclusions[@]}" --password-file="$pwd_file" "$ubuntu/.last" "sync/.last" 2>/dev/null

  last_written_by=$(<"sync/.last")

  if [[ $name != $last_written_by ]]; then
    printf "$clear_third$overwrite_warning_a$last_written_by $overwrite_warning_b"

    confirmation=$(read_one_uc)
    if [[ $confirmation != $keyyes ]]; then
      flag=''
    fi

  fi
}

#———————————————————————————————————————— ask user what to do

# returns $flag indicating user's command

get_user_command(){
  flag=$(read_one_uc)
  
  while [[ "$flag" != "" ]] && [[ $flag != $upload ]] && [[ $flag != $download ]]; do
    printf "$invalid_choice";
    flag=$(read_one_uc)
  done
}

#————————————————————————————————————————————————
#———————————————————————————————————————— program
#————————————————————————————————————————————————
#
#    three hidden files:
#
#   .pass = rsyncd password
#   .name = first name of user
#   sync/.last = name of person who last worked on site

cd "$(current_dir)"

#———————————————————————————————————————— welcome screen

printf "$clear_entire$welcome"

get_user_name # returns $name of person using program

printf "$clear_bottom$instructions_a$name$instructions_b"

get_user_command # returns $flag indicating user's command

#———————————————————————————————————————— create rsync password file and
#———————————————————————————————————————— ask if overwrite other user's files

if [[ $flag != '' ]]; then
  echo $pass > $pwd_file
  chmod 600 "$pwd_file"
  confirm_overwrite # reset $flag if files should not be overwritten
fi

#———————————————————————————————————————— upload

if [[ $flag == $upload ]]; then

  if ! files_exist "sync"; then # no files to synchronize
    printf "$nothing_to_upload"
    read -n 1 close

  else # uploading normally
    echo $name > "sync/.last"
    counter=0
    unset user_input
    printf "$clear_third$uploading"

  	printf "\e[22;0H    " # position cursor for progress bar
    while [[ "${user_input}" != 'x' ]]; do
      correct_svg_names
      char='·'
      rsync -az --delete "${exclusions[@]}" --password-file=$pwd_file "sync/" $ubuntu 2>/dev/null && char='|'
      counter=$((counter+1))
      if [ $counter == "60" ]; then
        counter=0
        printf "\e]22;0H\e[K    "
      fi
      printf "$char"
      read -t $interval -n 1 user_input
    done
  fi
fi

#———————————————————————————————————————— download

if [[ $flag == $download ]]; then
  printf "$clear_third$replace_warning";
  confirmation=$(read_one_uc)

  if [[ $confirmation == $keyyes ]]; then
    printf "$clear_third$downloading"
    msg="$download_failed"
    rsync -az --delete "${exclusions[@]}" --password-file=$pwd_file "$ubuntu/" "sync" 2>/dev/null && msg="$download_finished"
    printf "$msg"
    read -n 1 close
  fi
fi

#———————————————————————————————————————— finished

osascript -e 'tell application "Terminal" to close first window' & exit

#———————————————————————————————————————— fin
