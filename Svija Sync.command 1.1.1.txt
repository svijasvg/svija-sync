#!/usr/bin/env bash
#———————————————————————————————————————— config

x

#———————————————————————————————————————— instructions
#
#   https://github.com/svijasvg/svija-sync
#
#———————————————————————————————————————— language independent

     version='1.1.1'
 sync_folder='sync'
         red=`echo $'\e[1;91m'`
        none=`echo $'\e[0;0m'`
          cr=`echo $'\012\015'`

#———————————————————————————————————————— localized English

        motd=$(curl -Ls msg.svija.com/$version/en.txt)

       keyup='U'
     keydown='D'
      keyyes='Y'
       keyno='N'

  whats_name='What is your first name?'
  name_error="Allowed characters:\n\n2-30 letters, dash, period and space. No accents."
          on='on'
    computer='your computer'
       wsite='site'
      server='website'
      folder='folder'
     replace='Synchronizing'
    finished='Synchronization complete'
        with='with'
        from='content of'
 downloading='Downloading from'
do_not_close='Do not close this window.'
     nothing='Nothing to upload.'
     user_id='user'
  first_name='name'

       uload="$red$keyup$none""pload"
       dload="$red$keydown$none""ownload"

      choose='Choose an option (return to cancel)'
    close_uc=$red"Press return$none to close"
    close_lc=$red"press return$none to close"

    canceled="$red""Synchronization canceled — $close_lc.$none\n"

     warning="$red""Replace $folder \"$sync_folder\" $on $computer$none — are you sure? [$keyyes/$keyno]:"
    warning2="has modified the site$none since your last upload. Continue? [$keyyes/$keyno]:"
   uploading="$replace $site $with \"$sync_folder\" $on $computer..."
 downloading="$downloading $folder \"$sync_folder\" $on $site...\n$do_not_close"
  bad_choice="Invalid choice — $close_lc."

#———————————————————————————————————————— instructions

invalid="$bad_choice
       $red$keyup=uploader  $keydown=downloader :$none"

instructions1="    Svija Sync V$version
    $red$server : $site
    $user_id : $user
    $first_name: "

instructions2="

    $motd$none

    $computer -> $wsite   $uload
    $computer <- $wsite   $dload

$choose:"

#——————————————————————————————————————————————————
#———————————————————————————————————————— variables
#——————————————————————————————————————————————————

name=''
name_file='.name'
last_file='.last'

pwd_file='.pass'

ubuntu="$user@$site::$user/$sync_folder"

interval=5

exclusions=(
  --exclude ".DS_Store"
  --exclude ".swp"
  --exclude ".git"
  --exclude ".command"
  --exclude ".pwd"
)


#——————————————————————————————————————————————————
#———————————————————————————————————————— functions
#——————————————————————————————————————————————————

#———————————————————————————————————————— 1 upper case

to_upper(){
  echo "$1" | tr a-z A-Z
}

#———————————————————————————————————————— 2 lower case

to_lower(){
  echo "$1" | tr A-Z a-z
}

#———————————————————————————————————————— one letter in upper case

read_one_uc(){
  read -n 1 character;
  character=$(to_upper "$character")
  echo $character
}

#———————————————————————————————————————— 3 capitalize first letter

capitalize_first(){

  firstletter=`echo $1 | cut -c1-1`
  rest=`echo $1 | cut -c2-60`

  firstletter=$(to_upper $firstletter)

  chrlen=${#rest}
  if (( chrlen > 1 )); then
    rest=$(to_lower $rest)
  else
    rest=$(to_upper $rest)
  fi

echo "$firstletter$rest"
}

#———————————————————————————————————————— 4 capitalize jean-philippe

capitalize_dash(){

  tiret="^.*\-.*$"

  if [[ "$1" =~ $tiret ]]; then
    IFS='-'
    read -ra ADDR <<< "$1"
    first=$(capitalize_first "${ADDR[0]}")
    second=$(capitalize_first "${ADDR[1]}")
    final="$first\055$second"
  else
    final=$(capitalize_first $1)
  fi
  echo $final
}

#———————————————————————————————————————— 5 capitalize space-separated words

capitalize_words(){
  words=''

  arrayName=$@
  for i in ${arrayName[@]};
    do
      i=$(capitalize_dash $i)
      words="$words$i "
    done

  # strip last character
  words=${words%?}
  echo $words
}

#———————————————————————————————————————— 6 get name prompt

get_name_prompt(){
  safe_name="^[a-zA-Z\.\ \-]{2,30}$"
  prpt="$cr$red$1$none "

  while true; do
    read -p "$prpt" name

    if [[ "$name" =~ $safe_name ]]
      then return 1
      else printf "\n$2\n"
    fi
  done
}

#———————————————————————————————————————— 7 get name

# get_name "$name_file" "$whats_name" "$name_error"

get_name(){
  gn_name_file="$1"
  gn_whats_name="$2"
  gn_name_error="$3"

  if [[ -f "$gn_name_file" ]]
  then
    name=$(<$gn_name_file)
  else
    get_name_prompt "$gn_whats_name" "$gn_name_error"
    name=$(capitalize_words $name)
    echo $name > $gn_name_file
  fi
}

#———————————————————— name 2.svg › name.svg

check_svg_names(){
  csn_sync_folder=$1
  sync_dirs=($csn_sync_folder/*)
  
  for f in "${sync_dirs[@]}"; do
    sub_dirs=("$f"/*.svg)
    for g in "${sub_dirs[@]}"; do
  
      [[ $g =~ ^.+\s\d\.svg ]] && echo matched
  
      regexp="^.+[[:space:]][[:digit:]]\.svg"
      if [[ $g =~ $regexp ]]
        then
          new_name="${g::${#g}-6}"".svg"
          mv "$g" "$new_name"
      fi
  
    done
  done
}

#———————————————————————————————————————— get current directory

current_dir(){
  this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
  echo $this_dir
}

#———————————————————————————————————————— local sync folder exists & is not empty

files_exist(){

  shopt -s nullglob
  dirs=( ./$1/*/ )
  dirs_count=${#dirs[@]}

  if (( dirs_count < 3 ))
    then return 1
    else return 0
  fi
}

#————————————————————— check if last was current user

# overwrite_last "$flag" "$name" "$sync_folder" "$last_file"
# modifies flag & sync_folder/.last

overwrite_last(){
  ov_flag="$1"
  ov_name="$2"
  ov_sync_folder="$3"
  ov_last_file="$4"

  ov_last=''

  mkdir -p $ov_sync_folder
  echo "$ov_name" > "$ov_sync_folder/$ov_last_file"

  rsync -az --delete "${exclusions[@]}" --password-file="$pwd_file" "$ubuntu/$ov_last_file" "$ov_sync_folder/$ov_last_file"  2>/dev/null

  ov_last=$(<$ov_sync_folder/$ov_last_file)

  if [[ $ov_name != $ov_last ]]
  then
    printf "\n\n$red$ov_last $warning2 "
    confirmation=$(read_one_uc)

    if [[ $confirmation != $keyyes ]]
    then
      ov_flag=''
    fi

  fi
  flag=$ov_flag
}

#———————————————————————————————————————— ask user what to do

query_user(){
  printf "\n$2 ";
  flag=$(read_one_uc)
  
  while [[ "$flag" != "" ]] && [[ $flag != $keyup ]] && [[ $flag != $keydown ]]; do
    printf "\n\n$3 ";
    flag=$(read_one_uc)
  done
}

#————————————————————————————————————————————————
#———————————————————————————————————————— program
#————————————————————————————————————————————————

# three hidden files:
#   .pass = rsyncd password
#   .name = first name of user
#   sync/.last = name of person who last worked on site

cd "$(current_dir)"
get_name "$name_file" "$whats_name" "$name_error"
query_user "$flag" "$instructions1$name$instructions2" "$invalid"

if [[ $flag != '' ]]
then
  echo $pass > $pwd_file
  chmod 600 "$pwd_file"
  overwrite_last "$flag" "$name" "$sync_folder" "$last_file"
fi

#———————————————————————————————————————— upload

if [[ $flag == $keyup ]]
then

  if ! files_exist $sync_folder
  then
    printf "\n\n$nothing\n\n$canceled\n"
    read -n 1 close

  else
    printf "\n$uploading\n\n    $close_uc\n    "
    echo $name > "$sync_folder/$last_file"
    counter=0
  
    while true
      do
        if [ $counter == "60" ]; then
          counter=0
          printf "\n    "
        fi
        check_svg_names "$sync_folder"
        rsync -az --delete "${exclusions[@]}" --password-file=$pwd_file "$sync_folder/" $ubuntu
        printf "|"
        counter=$((counter+1))
        sleep $interval
      done
  fi
fi

#———————————————————————————————————————— download

if [[ $flag == $keydown ]]
then
  printf "\n$warning ";
  confirmation=$(read_one_uc)

  if [[ $confirmation == $keyyes ]]
  then
    printf "\n\n$downloading\n"
    rsync -az --delete "${exclusions[@]}" --password-file=$pwd_file "$ubuntu/" $sync_folder
    printf "\n$finished — $close_lc.\n"
    read -n 1 close
  fi
fi

#———————————————————————————————————————— finished

printf "\nkillall Terminal\n\n"
killall Terminal

#———————————————————————————————————————— fin
